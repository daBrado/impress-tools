#!/usr/bin/env ruby

require 'logger'
require 'savon'
require 'json'

while ARGV[0] && ARGV[0][0,2] == "--"
  case ARGV.shift
  when "--short"
    LOG_SHORT = true
  when "--debug"
    LOG_LEVEL = Logger::DEBUG
  else
    ARGV.clear
  end
end
LOG_SHORT = false if !defined? LOG_SHORT
LOG_LEVEL = Logger::INFO if !defined? LOG_LEVEL

LOG_FORMATTER = Proc.new do |sev,d,p,msg|
  entry = []
  entry << DateTime.now.strftime('%F %T') if !LOG_SHORT
  entry << "[#{Process::pid}]" if !LOG_SHORT
  entry << "<#{Thread::current.object_id.to_s(16)}>" if Thread::main != Thread::current
  entry << "#{sev}:" if !LOG_SHORT
  entry << "#{msg}\n"
  entry.join(' ')
end

SAVON_LOG = Logger.new STDERR
SAVON_LOG.level = Logger::WARN
SAVON_LOG.formatter = LOG_FORMATTER
HTTPI.logger = SAVON_LOG

module Nokogiri
  module XML
    class Node
      def content_value
        if self.content.empty?
          return nil
        elsif self.content == 'false'
          return false
        elsif self.content == 'true'
          return true
        else
          return self.content
        end
      end
      def collapse
        result = inner_collapse
        return result ? (result.kind_of?(Array) ? result : [result]) : []
      end
      def inner_collapse
        case element_children.size
        when 0
          return self.content_value
        when 1
          return first_element_child.inner_collapse
        else
          array = []
          hash = {}
          self.element_children.each do |c|
            if c.name == "item" && !c.xpath('key').empty? && !c.xpath('value').empty?
              hash[c.xpath('key')[0].content.to_sym] = c.xpath('value')[0].content_value
            else
              array << c.inner_collapse
            end
          end
          raise Exception.new "hashy and non-hashy" if !hash.empty? && !array.empty?
          return (!hash.empty?) ? hash : array
        end
      end
    end
  end
end

module IMPReSS
  extend self
  WSDL = "https://www.mousephenotype.org/impress/soap/server?wsdl"
  LOG = Logger.new STDERR
  LOG.level = LOG_LEVEL
  LOG.formatter = LOG_FORMATTER

  class Client < Savon::Client
    def initialize(retry_interval: 10)
      @retry_interval = retry_interval
      super(wsdl: WSDL, logger: SAVON_LOG, pretty_print_xml: true, raise_errors: false)
    end
    def call(cmd, message=nil)
      begin
        response = super(cmd, message: message)
        sleep @retry_interval if response.http_error?
      end until response && !response.http_error?
      return response.doc.collapse
    end
  end

  class Database
    def initialize
      @data = (File.exists? json_filename) ? JSON.parse(File.read(json_filename), symbolize_names: true) : {}
      @client = IMPReSS::Client.new
      @tasks = Queue.new
      @threads = []
      @mutex = Mutex.new
    end
    def check?
      return @data[:when_last_modified] && @data[:when_last_modified] == @client.call(:get_when_last_modified)[0]
    end
    def json_filename(dated: false)
      if dated
        return "impress.#{@data[:when_last_modified]}.json"
      else
        return "impress.json"
      end
    end
    def update(max_tasks: 20)
      LOG.debug @client.operations
      until (timestamp = @client.call(:get_when_last_modified)[0]) == @data[:when_last_modified]
        LOG.info "Local IMPReSS database is out of date"
        @data = {}
        @data[:when_last_modified] = timestamp
        @tasks << Proc.new { get_pipelines() }
        LOG.info "Downloading IMPReSS database"
        Array.new(max_tasks) { Thread.new { handle_tasks } }.each { |t| t.join }
        LOG.info "IMPReSS database download complete"
      end
      save
      LOG.info "Local IMPReSS database is up to date"
    end
    def save
      File.new(json_filename(dated: true), 'w').write(JSON::pretty_generate(@data))
      File.unlink json_filename if File.symlink? json_filename
      File.symlink(json_filename(dated: true), json_filename) if !File.exists? json_filename
    end
    def handle_tasks
      LOG.debug "Handle tasks"; n=0
      @mutex.synchronize { @threads << Thread.current }
      until @tasks.empty? && @tasks.num_waiting == @threads.count { |t| t != Thread.current && t.alive? }
        task = @tasks.pop
        task.call if task
        n+=1 if task
      end
      @mutex.synchronize { @threads.delete Thread.current }
      @tasks << nil
      LOG.debug "Handled #{n} tasks"
    end
    def get_pipelines
      LOG.debug "Getting pipeline keys"
      @client.call(:get_pipeline_keys).each do |k|
        @tasks << Proc.new { get_pipeline(k.to_sym) }
      end
    end
    def get_pipeline(pipeline_key)
      LOG.debug "Getting pipeline #{pipeline_key}"
      pipeline = @client.call(:get_pipeline, pipeline_key: pipeline_key)[0]
      @mutex.synchronize { @data[pipeline_key] = pipeline }
      @mutex.synchronize { @data[pipeline_key][:procedures] = [] }
      @tasks << Proc.new { get_procedures(pipeline_key) }
    end
    def get_procedures(pipeline_key)
      LOG.debug "Getting procedure keys for pipeline #{pipeline_key}"
      @client.call(:get_procedures, pipeline_key: pipeline_key).each do |procedure|
        procedure_key = procedure[:procedure_key].to_sym
        @mutex.synchronize { @data[pipeline_key][:procedures] << procedure_key }
        if claim_key procedure_key
          LOG.debug "Recording procedure #{procedure_key}"
          @mutex.synchronize { @data[procedure_key] = procedure }
          @tasks << Proc.new { get_parameters(procedure_key) }
        else
          LOG.debug "Already found procedure #{procedure_key}"
        end
      end
    end
    def get_parameters(procedure_key)
      @mutex.synchronize { @data[procedure_key][:parameters] = [] }
      LOG.debug "Getting parameters for procedure #{procedure_key}"
      @client.call(:get_parameters, procedure_key: procedure_key).each do |parameter|
        @mutex.synchronize { @data[procedure_key][:parameters] << parameter[:parameter_key].to_sym }
        @tasks << Proc.new { add_parameter(parameter) }
      end
    end
    def add_parameter(parameter)
      parameter_key = parameter[:parameter_key].to_sym
      if claim_key parameter_key
        LOG.debug "Recording parameter #{parameter_key}"
        @mutex.synchronize { @data[parameter_key] = parameter }
        get_parameter_extra(parameter_key, :increments)
        get_parameter_extra(parameter_key, :options)
        get_parameter_extra(parameter_key, :mp_terms)
        get_parameter_extra(parameter_key, :eq_terms)
        get_parameter_extra(parameter_key, :ontology_options)
      else
        LOG.debug "Already found parameter #{parameter_key}"
      end
    end
    def get_parameter_extra(parameter_key, name)
      @tasks << Proc.new do
        LOG.debug "Getting #{name} for parameter #{parameter_key}"
        value = @client.call(('get_parameter_'+name.to_s).to_sym, parameter_key: parameter_key)
        @mutex.synchronize { @data[parameter_key][name] = value }
      end
    end
    def claim_key(key)
      @mutex.synchronize do
        return false if @data.include? key
        @data[key] = nil
        return true
      end
    end
  end

  def check?
    if Database.new.check?
      LOG.info "Local IMPReSS database is up to date"
      return 0
    else
      LOG.info "Local IMPReSS database is out of date"
      return 1
    end
  end

  def update
    Database.new.update
  end

  def daemon(interval: 360)
    db = Database.new
    while true
      db.update
      LOG.info "Checking again in #{interval} seconds"
      sleep interval
    end
  end
end

case ARGV[0]
when "check"
  IMPReSS::check?
when "update"
  IMPReSS::update
when "daemon"
  IMPReSS::daemon
else
  STDERR.puts "Usage: #{$0} [--short] [--debug] < check | update | daemon >"
end
